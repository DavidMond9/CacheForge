Query,FullResponse
"
You are tasked to generate a complete, compilable C++ file for a CPU cache eviction policy for ChampSim CRC2.

DO NOT output any English text, description, or explanation.  
ONLY output C++ code.

You are free to design **any valid eviction policy** — it could be based on:
- LRU (Least Recently Used)
- Random
- LFU (Least Frequently Used)
- LFU+LRU hybrid
- Custom heuristics
- Anything that is internally consistent

However, you must strictly satisfy the following rules:

- Correctly match the ChampSim CRC2 interface:
  - `void InitReplacementState()`
  - `uint32_t GetVictimInSet(uint32_t cpu, uint32_t set, const BLOCK *current_set, uint64_t PC, uint64_t paddr, uint32_t type)`
  - `void UpdateReplacementState(uint32_t cpu, uint32_t set, uint32_t way, uint64_t paddr, uint64_t PC, uint64_t victim_addr, uint32_t type, uint8_t hit)`
  - `void PrintStats_Heartbeat()`
  - `void PrintStats()`
- Maintain any necessary per-line metadata (like access timestamps, access counters, etc.) appropriately
- Assume flat cache structure:
  - Number of sets = `NUM_SET`
  - Associativity = `ASSOC`
- At the top of your code, manually define:
  - `#define NUM_SET 2048`
  - `#define ASSOC 16`
- Only use standard C++11 or newer features
- Output pure C++ between `%%` markers only (no markdown, no ```cpp)

Below is an **example starter structure** — you must complete it based on the policy you choose:

%%
#include ""champsim_crc2.h""
#include <vector>
#include <cstdint>
#include <climits>
#include <cstdlib>

#define NUM_SET 2048
#define ASSOC 16

// (Your metadata structs here)

void InitReplacementState() {
    // (Your initialization code here)
}

uint32_t GetVictimInSet(uint32_t cpu, uint32_t set, const BLOCK* current_set, uint64_t PC, uint64_t paddr, uint32_t type) {
    // (Your victim selection logic here)
}

void UpdateReplacementState(uint32_t cpu, uint32_t set, uint32_t way, uint64_t paddr, uint64_t PC, uint64_t victim_addr, uint32_t type, uint8_t hit) {
    // (Your state update logic here)
}

void PrintStats_Heartbeat() {
    // (Heartbeat stats here)
}

void PrintStats() {
    // (Final stats here)
}
%%
","%%
#include ""champsim_crc2.h""
#include <vector>
#include <cstdint>
#include <climits>
#include <cstdlib>
#include <iostream>

#define NUM_SET 2048
#define ASSOC 16

struct LineState {
    uint64_t freq;
    uint64_t last_access;
};

static LineState repl[NUM_SET][ASSOC];
static uint64_t global_clock;
static uint64_t stat_accesses, stat_hits, stat_misses, stat_evictions;

void InitReplacementState() {
    global_clock = 0;
    stat_accesses = stat_hits = stat_misses = stat_evictions = 0;
    for (uint32_t s = 0; s < NUM_SET; ++s) {
        for (uint32_t w = 0; w < ASSOC; ++w) {
            repl[s][w].freq = 0;
            repl[s][w].last_access = 0;
        }
    }
}

uint32_t GetVictimInSet(uint32_t cpu, uint32_t set, const BLOCK* current_set,
                        uint64_t PC, uint64_t paddr, uint32_t type) {
    uint32_t victim_way = 0;
    uint64_t min_freq = ULLONG_MAX;
    uint64_t min_time = ULLONG_MAX;
    for (uint32_t w = 0; w < ASSOC; ++w) {
        if (repl[set][w].freq < min_freq ||
            (repl[set][w].freq == min_freq && repl[set][w].last_access < min_time)) {
            min_freq = repl[set][w].freq;
            min_time = repl[set][w].last_access;
            victim_way = w;
        }
    }
    return victim_way;
}

void UpdateReplacementState(uint32_t cpu, uint32_t set, uint32_t way,
                            uint64_t paddr, uint64_t PC, uint64_t victim_addr,
                            uint32_t type, uint8_t hit) {
    global_clock++;
    stat_accesses++;
    if (hit) {
        stat_hits++;
        repl[set][way].freq++;
        repl[set][way].last_access = global_clock;
    } else {
        stat_misses++;
        if (repl[set][way].freq != 0 || repl[set][way].last_access != 0) {
            stat_evictions++;
        }
        repl[set][way].freq = 1;
        repl[set][way].last_access = global_clock;
    }
}

void PrintStats_Heartbeat() {
    std::cout << ""LFU Heartbeat: accesses="" << stat_accesses
              << "" hits="" << stat_hits
              << "" misses="" << stat_misses
              << "" evictions="" << stat_evictions
              << std::endl;
}

void PrintStats() {
    std::cout << ""LFU Final Stats: accesses="" << stat_accesses
              << "" hits="" << stat_hits
              << "" misses="" << stat_misses
              << "" evictions="" << stat_evictions
              << std::endl;
}
%%"
